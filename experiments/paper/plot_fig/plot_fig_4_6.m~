%% select 4 points of the tetrahedron
alpha = 0.99;
v = ones(4,1)./4;
addpath('../../../');
addpath('../../../test_case/');
load('4x4x4_not_converge_non_shift.mat', 'R1');
R = R1;
T = [1 0 0 1; 0 1 0 1; 0 0 1 1];
% sample points in a tetrahedron
Z = tetrahedron_grid(50, T, 10);
%% vertices at the origin
C = [T(:, 1) - T(:,4) T(:,2)-T(:,4) T(:,3)-T(:,4)];
% map the sample points to the 4x4x4 tensor elements
X = C\(Z - T(:,4)*ones(1, size(Z,2)));
X(abs(X) < 2*eps(1)) = 0;
X = [X; 1-sum(X)];
X(abs(X) < 2*eps(1)) = 0;
for i=1:size(X,2)
    X(:,i) = X(:,i)/sum(X(:,i));
end
%% compute tensorPageRank solution history
[xtrue, xhist] = tensorRankNonShift(alpha, R, v, v, 5e2);
xhist = [v xhist];
%% compute the function value for the volume
I = eye(4);
step = @(x) (1-alpha).*inv(I - alpha/2.*R*(kron(x,I)+kron(I,x)))*v;
fxp = @(x,s) norm(step(s) - s, 1)/norm(s-x,1);
fx = @(x) fxp(x, step(x));
nj = zeros(size(X, 2), 1);
njac = zeros(size(X, 2), 1);
for i = 1:size(X,2)
    nj(i) = fx(X(:, i));
    J = getJ(alpha, R, v, X(:, i));
    Jv = sort(eig(J), 'descend');
    njac(i) = Jv(2);
end
%% kappa value
clf;
hold all;

ind = find(nj>1);
% Px = X(1, ind);
% Py = X(2, ind);
% Pz = X(3, ind);
% tetrahedron points
Px = Z(1, ind);
Py = Z(2, ind);
Pz = Z(3, ind);
ZP = C*xhist(1:3, :) + T(:, 4)*ones(1, size(xhist, 2));
Pnj = nj(ind);
hold on;
% plot3([0 0 0 0 1 0 0 1 0], [0 0 1 0 0 0 0 0 1], [0 1 0 0 0 1 0 0 0], 'k--');
% tetrahedron plot
plot3([0 0 1 0 1 1 1 0], [0 1 1 0 0 1 0 1], [1 0 1 1 0 1 0 0], 'k--');
scatter3(Px, Py, Pz, 25, Pnj, 'filled');
% plot3(xhist(1,:), xhist(2,:), xhist(3,:), 'g^-');
% tetrahedron solution path
plot3(ZP(1,:), ZP(2,:), ZP(3,:), 'g^-', 'LineWidth', 2);
cmapsetup;
colorbar;

axis off;
axis tight;
axis square;
axis equal;
set_figure_size([4 4]);

%% plot 2nd largest eigenvalue of Jacobian
clf;
hold all;

ind = find(njac>1);
% Px = X(1, ind);
% Py = X(2, ind);
% Pz = X(3, ind);
% tetrahedron points
Px = Z(1, ind);
Py = Z(2, ind);
Pz = Z(3, ind);
ZP = C*xhist(1:3, :) + T(:, 4)*ones(1, size(xhist, 2));
Pnj = njac(ind);
hold on;
% plot3([0 0 0 0 1 0 0 1 0], [0 0 1 0 0 0 0 0 1], [0 1 0 0 0 1 0 0 0], 'k--');
% tetrahedron plot
plot3([0 0 1 0 1 1 1 0], [0 1 1 0 0 1 0 1], [1 0 1 1 0 1 0 0], 'k--');
scatter3(Px, Py, Pz, 25, Pnj, 'filled');
% plot3(xhist(1,:), xhist(2,:), xhist(3,:), 'g^-');
% tetrahedron solution path
plot3(ZP(1,:), ZP(2,:), ZP(3,:), 'g^-', 'LineWidth', 2);
cmapsetup;
caxis([-1.5 0.75]);
colorbar;

axis off;
axis tight;
axis square;
axis equal;
set_figure_size([4 4]);

%% Newton's method
[~, xhist] = tensorNewton(alpha, R, v,v);
xhist = [v xhist];
I = eye(4);
step = @(x) (1-alpha).*inv(I - alpha/2.*R*(kron(x,I)+kron(I,x)))*v;
fxp = @(x,s) norm(step(s) - s, 1)/norm(s-x,1);
fx = @(x) fxp(x, step(x));
step = @(x) inv(alpha*R*(kron(x,I)+kron(I,x))-I)*(alpha*R*kron(x,x)-(1-alpha)*v);
jacn = @(x) alpha.*R*(kron(x, I)+kron(I,x)) - I;
nj = zeros(size(X, 2),1);
njac = zeros(size(X, 2),1);
for i = 1:size(X,2)
    nj(i) = fx(X(:, i));
    J = jacn(X(:, i));
    Jv = sort(eig(J), 'descend');
    njac(i) = Jv(2);
end
%% kappa value
clf;
hold all;
ind = find(nj>1);
% Px = X(1, ind);
% Py = X(2, ind);
% Pz = X(3, ind);
% tetrahedron points
Px = Z(1, ind);
Py = Z(2, ind);
Pz = Z(3, ind);
ZP = C*xhist(1:3, :) + T(:, 4)*ones(1, size(xhist, 2));
Pnj = nj(ind);
hold on;
%plot3([0 0 0 0 1 0 0 1 0], [0 0 1 0 0 0 0 0 1], [0 1 0 0 0 1 0 0 0], 'k--');
% tetrahedron plot
plot3([0 0 1 0 1 1 1 0], [0 1 1 0 0 1 0 1], [1 0 1 1 0 1 0 0], 'k--');
scatter3(Px, Py, Pz, 20, Pnj, 'filled');
%plot3(xhist(1,:), xhist(2,:), xhist(3,:), 'g^-', 'LineWidth', 2);
% tetrahedron solution path
plot3(ZP(1,:), ZP(2,:), ZP(3,:), 'g^-', 'LineWidth', 2);
cmapsetup;
colorbar;
axis off;
axis tight;
axis square;
axis equal;
set_figure_size([4 4]);

%% plot 2nd largest eigenvalue of Jacobian
clf;
hold all;

ind = find(njac>1);
% Px = X(1, ind);
% Py = X(2, ind);
% Pz = X(3, ind);
% tetrahedron points
Px = Z(1, ind);
Py = Z(2, ind);
Pz = Z(3, ind);
ZP = C*xhist(1:3, :) + T(:, 4)*ones(1, size(xhist, 2));
Pnj = njac(ind);
hold on;
% plot3([0 0 0 0 1 0 0 1 0], [0 0 1 0 0 0 0 0 1], [0 1 0 0 0 1 0 0 0], 'k--');
% tetrahedron plot
plot3([0 0 1 0 1 1 1 0], [0 1 1 0 0 1 0 1], [1 0 1 1 0 1 0 0], 'k--');
scatter3(Px, Py, Pz, 25, Pnj, 'filled');
% plot3(xhist(1,:), xhist(2,:), xhist(3,:), 'g^-');
% tetrahedron solution path
plot3(ZP(1,:), ZP(2,:), ZP(3,:), 'g^-', 'LineWidth', 2);
cmapsetup;
caxis([-1.5 0.75]);
colorbar;

axis off;
axis tight;
axis square;
axis equal;
set_figure_size([4 4]);